// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: cap/cap.proto

package cap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CapClient is the client API for Cap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CapClient interface {
	Pense(ctx context.Context, in *PenseRequest, opts ...grpc.CallOption) (*PenseReply, error)
}

type capClient struct {
	cc grpc.ClientConnInterface
}

func NewCapClient(cc grpc.ClientConnInterface) CapClient {
	return &capClient{cc}
}

func (c *capClient) Pense(ctx context.Context, in *PenseRequest, opts ...grpc.CallOption) (*PenseReply, error) {
	out := new(PenseReply)
	err := c.cc.Invoke(ctx, "/cap.Cap/Pense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapServer is the server API for Cap service.
// All implementations must embed UnimplementedCapServer
// for forward compatibility
type CapServer interface {
	Pense(context.Context, *PenseRequest) (*PenseReply, error)
	mustEmbedUnimplementedCapServer()
}

// UnimplementedCapServer must be embedded to have forward compatible implementations.
type UnimplementedCapServer struct {
}

func (UnimplementedCapServer) Pense(context.Context, *PenseRequest) (*PenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pense not implemented")
}
func (UnimplementedCapServer) mustEmbedUnimplementedCapServer() {}

// UnsafeCapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CapServer will
// result in compilation errors.
type UnsafeCapServer interface {
	mustEmbedUnimplementedCapServer()
}

func RegisterCapServer(s grpc.ServiceRegistrar, srv CapServer) {
	s.RegisterService(&Cap_ServiceDesc, srv)
}

func _Cap_Pense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapServer).Pense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cap.Cap/Pense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapServer).Pense(ctx, req.(*PenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cap_ServiceDesc is the grpc.ServiceDesc for Cap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cap.Cap",
	HandlerType: (*CapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pense",
			Handler:    _Cap_Pense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cap/cap.proto",
}
